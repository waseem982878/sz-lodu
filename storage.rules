rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Function to check if the user is the owner of the path
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // KYC documents: Users can only upload to their own folder.
    match /kyc/{userId}/{fileName} {
      allow write: if isOwner(userId) && request.resource.size < 5 * 1024 * 1024 && request.resource.contentType.matches('image/.*');
      allow read: if isOwner(userId); // Or admins, which needs a more complex setup or cloud function
    }

    // Battle results: Players can only upload to their specific battle folder.
    match /results/{battleId}/{userId}/{fileName} {
      // This rule is a bit permissive. A better rule would check if the user is a player in the battle.
      // However, that requires a Firestore read, which isn't available here directly.
      allow write: if isOwner(userId) && request.resource.size < 5 * 1024 * 1024 && request.resource.contentType.matches('image/.*');
      allow read: if isOwner(userId); // Same admin limitation as above
    }

    // User profile pictures
    match /profile-pictures/{userId}/{fileName} {
        allow write: if isOwner(userId) && request.resource.size < 2 * 1024 * 1024 && request.resource.contentType.matches('image/.*');
        allow read: if request.auth != null; // Allow all authenticated users to see profile pics
    }
    
    // Deny all other read/write operations by default for security
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
