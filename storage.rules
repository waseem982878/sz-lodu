rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Default Deny: Disallow all reads/writes by default
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // Profile Avatars:
    // - Path: /avatars/{userId}
    // - Allow write if the user is authenticated and is the owner of the profile.
    // - Allow anyone to read (profile pictures are public).
    match /avatars/{userId} {
      allow write: if isOwner(userId);
      allow read: if true;
    }
    
    // KYC Documents:
    // - Path: /kyc/{userId}/{document}
    // - Allow write if the user is authenticated and is the owner.
    // - Disallow public reads. Only specific backend processes/admins should access.
    match /kyc/{userId}/{document} {
        allow write: if isOwner(userId) && request.resource.size < 5 * 1024 * 1024 && request.resource.contentType.matches('image/.*');
        allow read: if isOwner(userId); // Or setup admin access
    }

    // Deposit Screenshots:
    // - Path: /deposits/{userId}/{fileName}
    // - Allow write if the user is authenticated and is the owner.
    // - Disallow public reads.
    match /deposits/{userId}/{fileName} {
      allow write: if isOwner(userId) && request.resource.size < 5 * 1024 * 1024 && request.resource.contentType.matches('image/.*');
      allow read: if isOwner(userId); // Or setup admin access
    }
    
    // Game Result Screenshots:
    // - Path: /results/{battleId}/{userId}
    // - Allow write if the user is authenticated and is the owner.
    // - Disallow public reads.
    match /results/{battleId}/{userId} {
      allow write: if isOwner(userId) && request.resource.size < 5 * 1024 * 1024 && request.resource.contentType.matches('image/.*');
      allow read: if isOwner(userId); // Or setup admin access
    }
  }
}
