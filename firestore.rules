rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // PUBLIC collections
    match /config/{docId} {
      allow read;
      allow write: if isAdmin(); // Only admins can write config
    }
    match /payment_upis/{docId} {
      allow read;
      allow write: if isAdmin(); // Only admins can manage UPIs
    }

    // USER-specific collections
    match /users/{userId} {
      // Anyone can read a user profile (for leaderboards, battle info, etc.)
      allow read;

      // A user can create their own profile document
      allow create: if isOwner(userId);

      // A user can only update their own profile, and only specific fields.
      // Balances, stats, and KYC status must be updated by the server/admin.
      allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
        'name', 'avatarUrl', 'lastSeen', 'upiId', 'dob', 'panNumber', 'aadhaarNumber', 'panCardUrl', 'aadhaarCardUrl', 'kycStatus', 'kycNotes'
      ]);

      // Admins can update any field on any user document
      allow update: if isAdmin();
    }
    
    match /agents/{agentId} {
        allow read, write: if isAdmin();
    }

    match /referrals/{referralId} {
        // Users can create their own referral records (done via server logic)
        allow create: if isOwner(request.resource.data.referredId);
        // Only involved parties can read it
        allow read: if isOwner(request.auth.uid) || isAdmin();
        // Only server/admin can update it to 'completed'
        allow update: if isAdmin();
    }

    match /transactions/{transactionId} {
      // User can only read their own transactions. Admin can read all.
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      // User can create their own transaction.
      allow create: if isOwner(request.resource.data.userId);

      // Only an admin can update a transaction (to approve/reject it).
      allow update: if isAdmin();
    }

    match /battles/{battleId} {
      // Anyone can read battle documents to see open/ongoing games
      allow read;

      // A user can create a battle for themselves
      allow create: if isOwner(request.resource.data.creator.id);
      
      // Rules for updating a battle document
      allow update: if 
        // Rule 1: An opponent can join an 'open' battle
        (resource.data.status == 'open' && isOwner(request.resource.data.opponent.id)) ||
        // Rule 2: Creator can add a room code
        (isOwner(resource.data.creator.id) && request.resource.data.roomCode != resource.data.roomCode) ||
        // Rule 3: Any participant can mark themselves as ready
        (request.resource.data.readyPlayers[request.auth.uid] == true) ||
        // Rule 4: Any participant can submit their result for an in-progress game
        (resource.data.status == 'inprogress' && request.resource.data.result[request.auth.uid] != null) ||
        // Rule 5: Admins can update battles (e.g., to set a winner)
        isAdmin();
    }
  }
}
