
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users can only read/write their own profile
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow list: if isAdmin(); // Admins can list users
    }
    
    // Config can be read by anyone, but only written by admins
    match /config/{configId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
    // Battles can be created/read/updated by authenticated users
    match /battles/{battleId} {
      allow read, create, update: if isAuthenticated();
      allow list: if isAuthenticated();
      allow delete: if isAdmin(); // Only admins can delete battles
    }
    
    // Transactions can be created by users, but only read by the owner or an admin
    match /transactions/{transactionId} {
        allow create: if isAuthenticated();
        allow read, update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
        allow list: if isAdmin();
    }
    
    // Referrals can be created by users, read by participants
    match /referrals/{referralId} {
        allow create: if isAuthenticated();
        allow read: if isAuthenticated() && (isOwner(resource.data.referrerId) || isOwner(resource.data.referredId));
        allow list: if isAdmin();
    }
    
    // Payment UPIs can only be managed by admins
    match /payment_upis/{upiId} {
        allow read: if isAuthenticated(); // All users can read to find an active UPI
        allow list: if isAuthenticated();
        allow create, update, delete: if isAdmin();
    }

    // Agents can only be managed by admins
    match /agents/{agentId} {
        allow read, list, create, update, delete: if isAdmin();
    }
  }
}
