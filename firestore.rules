rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Returns true if the user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Returns true if the user is the owner of the data.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Check if the incoming data for a user profile update is valid
    function isValidUserUpdate() {
        let sensitiveFields = ['depositBalance', 'winningsBalance', 'kycStatus', 'gamesPlayed', 'gamesWon', 'penaltyTotal', 'isAdmin', 'referralCode', 'referredBy'];
        return request.resource.data.keys().diff(resource.data.keys()).hasOnly(sensitiveFields) == false;
    }

    // ======== USER PROFILES ========
    match /users/{userId} {
      // Anyone can read a user profile (for leaderboards, battle display, etc.)
      allow read: if isAuthenticated();
      
      // A user can only be created if the authenticated user's ID matches the document ID.
      allow create: if isOwner(userId);
      
      // An owner can update their own profile, but cannot update sensitive fields.
      // Admins can update anything.
      allow update: if (isOwner(userId) && isValidUserUpdate()) || isAdmin();
    }
    
    // ======== BATTLES ========
    match /battles/{battleId} {
        // Any authenticated user can read a battle document.
        allow read: if isAuthenticated();

        // A user can create a battle if the creator ID in the document matches their own user ID.
        allow create: if isOwner(request.resource.data.creator.id);

        // An update is allowed if the user is the creator or the opponent,
        // and they are not trying to tamper with critical fields directly.
        // Admins can update anything.
        allow update: if 
            (isAuthenticated() && (
                isOwner(resource.data.creator.id) || (resource.data.opponent != null && isOwner(resource.data.opponent.id))
            ) && (
                // Players can't change status, winner, or amounts directly
                request.resource.data.status == resource.data.status &&
                request.resource.data.winnerId == resource.data.winnerId &&
                request.resource.data.amount == resource.data.amount
            )) || isAdmin();
            
        // No one can delete a battle except an admin.
        allow delete: if isAdmin();
    }
    
    // ======== TRANSACTIONS ========
    match /transactions/{transactionId} {
      // A user can only see their own transactions. Admins can see all.
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      // A user can only create a transaction for themselves.
      allow create: if isOwner(request.resource.data.userId);
      
      // Only admins can update a transaction (e.g., to approve/reject).
      allow update: if isAdmin();
      
      // No one can delete transactions.
      allow delete: if false;
    }

    // ======== CONFIG & REFERRALS ========
    // These collections are managed by admins or server-side logic.
    match /config/{docId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    match /referrals/{referralId} {
        allow read: if isOwner(resource.data.referrerId) || isOwner(resource.data.referredId) || isAdmin();
        allow create: if isAuthenticated(); // Server validates logic
        allow update, delete: if isAdmin();
    }
    match /payment_upis/{upiId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
     match /agents/{agentId} {
        allow read: if isAuthenticated(); // Or a more specific rule if needed
        allow write: if isAdmin();
    }
  }
}
