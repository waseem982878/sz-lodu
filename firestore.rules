rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isAdmin() {
      return request.auth != null && getUserRole(request.auth.uid) == 'admin';
    }

    // Users can read/write their own profile. Admins have full access.
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isAdmin();
    }
    
    // Users can create transactions and read their own. Admins have full access.
    match /transactions/{transactionId} {
      allow create: if request.auth.uid != null;
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      allow update, delete: if isAdmin();
    }
    
    // Players in a battle can read/update it. Admins have full access.
    match /battles/{battleId} {
        allow read, update: if request.auth.uid in resource.data.players || isAdmin();
        allow create: if request.auth.uid != null;
        allow delete: if isAdmin();
    }
    
    // Admins have full control over payment UPIs.
    match /payment_upis/{upiId} {
        allow read, write, create, delete: if isAdmin();
    }

    // Default deny all other collections to prevent unauthorized access.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
