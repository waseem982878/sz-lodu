datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Add other user fields as needed
  kycStatus     String    @default("pending")
  referralCode  String?   @unique
  kycDocumentUrl String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id          String      @id @default(cuid())
  userId      String
  amount      Float
  type        String // e.g., deposit, withdrawal, game_fee, prize
  status      String // e.g., pending, completed, failed
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Notification {
    id          String      @id @default(cuid())
    userId      String
    message     String
    read        Boolean     @default(false)
    createdAt   DateTime    @default(now())
}

model Referral {
    id              String      @id @default(cuid())
    referrerId      String
    referredId      String
    createdAt       DateTime    @default(now())

    @@unique([referrerId, referredId])
}
